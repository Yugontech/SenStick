<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\senstick_xxaa_s110_debug.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\senstick_xxaa_s110_debug.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Oct 13 10:21:57 2016
<BR><P>
<H3>Maximum Stack Usage =        816 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
diposeBLEEvent &rArr; senstickControlService_handleBLEEvent &rArr; onWrite &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SysTick_Handler</a><BR>
 <LI><a href="#[d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[6d]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[6f]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[146]">flash_mailbox</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e5]">senstick_setControlCommand</a><BR>
 <LI><a href="#[6c]">__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us</a><BR>
 <LI><a href="#[e5]">senstick_setControlCommand</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e5]">senstick_setControlCommand</a><BR>
 <LI><a href="#[d0]">app_notify_error_state_transit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">sm_state_change</a><BR>
 <LI><a href="#[10c]">cmd_queue_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10a]">cmd_process</a><BR>
 <LI><a href="#[6e]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI1_TWI1_IRQHandler</a> from nrf_drv_twi.o(i.SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[12]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from senstick_sensor_controller.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[29]">_button_event_handler</a> from gpio_button_monitoring.o(i._button_event_handler) referenced from gpio_button_monitoring.o(i.initButtonMonitoring)
 <LI><a href="#[24]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[69]">ack_error</a> from nrf_drv_twi.o(i.ack_error) referenced 4 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[62]">address_req</a> from nrf_drv_twi.o(i.address_req) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[2e]">app_gap_pstorage_callback</a> from app_gap.o(i.app_gap_pstorage_callback) referenced from app_gap.o(i.init_app_gap)
 <LI><a href="#[27]">app_timer_evt_get</a> from app_timer_appsh.o(i.app_timer_evt_get) referenced from app_timer_appsh.o(i.app_timer_evt_schedule)
 <LI><a href="#[31]">app_timer_evt_schedule</a> from app_timer_appsh.o(i.app_timer_evt_schedule) referenced from main.o(i.main)
 <LI><a href="#[2f]">battery_timer_handler</a> from battery_service.o(i.battery_timer_handler) referenced from battery_service.o(i.init_battery_service)
 <LI><a href="#[5f]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[5e]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[26]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[30]">device_manager_evt_handler</a> from senstick_device_manager.o(i.device_manager_evt_handler) referenced from senstick_device_manager.o(i.init_device_manager)
 <LI><a href="#[32]">diposeBLEEvent</a> from main.o(i.diposeBLEEvent) referenced from main.o(i.main)
 <LI><a href="#[33]">disposeSystemEvent</a> from main.o(i.disposeSystemEvent) referenced from main.o(i.main)
 <LI><a href="#[28]">dm_pstorage_cb_handler</a> from device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[39]">getBLEDataHandler</a> from acceleration_sensor_base.o(i.getBLEDataHandler) referenced 7 times from acceleration_sensor_base.o(.constdata)
 <LI><a href="#[38]">getMaxMinValueHandler</a> from acceleration_sensor_base.o(i.getMaxMinValueHandler) referenced 7 times from acceleration_sensor_base.o(.constdata)
 <LI><a href="#[37]">getSensorDataHandler</a> from acceleration_sensor_base.o(i.getSensorDataHandler) referenced 7 times from acceleration_sensor_base.o(.constdata)
 <LI><a href="#[25]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[61]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[35]">initSensorHandler</a> from acceleration_sensor_base.o(i.initSensorHandler) referenced 7 times from acceleration_sensor_base.o(.constdata)
 <LI><a href="#[2b]">led_timer_handler</a> from gpio_led_driver.o(i.led_timer_handler) referenced from gpio_led_driver.o(i.initLEDDriver)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2c]">on_advertising_error</a> from advertising_manager.o(i.on_advertising_error) referenced from advertising_manager.o(i.init_advertising_manager)
 <LI><a href="#[2d]">on_advertising_event</a> from advertising_manager.o(i.on_advertising_event) referenced from advertising_manager.o(i.init_advertising_manager)
 <LI><a href="#[66]">on_error</a> from nrf_drv_twi.o(i.on_error) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[63]">rx_address_req</a> from nrf_drv_twi.o(i.rx_address_req) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[68]">rx_done</a> from nrf_drv_twi.o(i.rx_done) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[67]">rx_prepare</a> from nrf_drv_twi.o(i.rx_prepare) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[23]">sched_event_handler</a> from senstick_sensor_controller.o(i.sched_event_handler) referenced from senstick_sensor_controller.o(i.TIMER2_IRQHandler)
 <LI><a href="#[36]">setSensorWakeupHandler</a> from acceleration_sensor_base.o(i.setSensorWakeupHandler) referenced 7 times from acceleration_sensor_base.o(.constdata)
 <LI><a href="#[34]">softdevice_assertion_handler</a> from softdevice_handler.o(i.softdevice_assertion_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[5a]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[5c]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[5b]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[58]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[59]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[5d]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[60]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2a]">timer_handler</a> from gpio_button_monitoring.o(i.timer_handler) referenced from gpio_button_monitoring.o(i.initButtonMonitoring)
 <LI><a href="#[64]">tx_done</a> from nrf_drv_twi.o(i.tx_done) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[65]">tx_prepare</a> from nrf_drv_twi.o(i.tx_prepare) referenced from nrf_drv_twi.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[218]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[219]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[21a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[21b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[21c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6c]"></a>__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, twi_slave_rtc.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToRTC
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromRTC
</UL>

<P><STRONG><a name="[6d]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[6e]"></a>__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_twi.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[6f]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[fd]"></a>__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bootloader_util.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToBCD
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertBLEDateTimeToRTCSetting
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadMetaData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSampleCount
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryLevel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlinking
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWrite
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadDateTime
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteSetting
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_put
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_get
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reOpenLog
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSampleCount
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_manager
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickMetaDataService
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickDataModel
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickControlService
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_device_name
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadDateTime
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorService
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerFormatStorage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advertising_manager
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLog
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadMetaData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c8]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWrite
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentLogAbstractText
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogAbstractText
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_device_name
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadAbstractText
</UL>

<P><STRONG><a name="[ca]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_device_name
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadAbstractText
</UL>

<P><STRONG><a name="[134]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[a0]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[224]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[225]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[226]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SEGGER_RTT_ConfigDownBuffer</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigDownBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigDownBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>

<P><STRONG><a name="[81]"></a>SEGGER_RTT_ConfigUpBuffer</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, segger_rtt.o(i.SEGGER_RTT_ConfigUpBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
</UL>

<P><STRONG><a name="[82]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[83]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[87]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 414 bytes, Stack size 128 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>

<P><STRONG><a name="[a]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = SPI0_TWI0_IRQHandler &rArr; irq_handler_spi &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SPI1_TWI1_IRQHandler &rArr; nrf_drv_twi_int_handler &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, senstick_sensor_controller.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = TIMER2_IRQHandler &rArr; app_mailbox_put &rArr; app_mailbox_sized_put &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_put
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>TwiSlave_RX</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, twi_manager.o(i.TwiSlave_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TwiSlave_RX &rArr; nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUVSensorData
</UL>

<P><STRONG><a name="[98]"></a>TwiSlave_TX</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, twi_manager.o(i.TwiSlave_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TwiSlave_TX &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUVSensor
</UL>

<P><STRONG><a name="[9]"></a>UART0_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_IRQHandler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[229]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[189]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
</UL>

<P><STRONG><a name="[191]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, senstick_data_model.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeButtonStatus
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setButtonStatus
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_advertising_event
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteSetting
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
</UL>

<P><STRONG><a name="[22a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[22b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[22c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ae]"></a>adv_data_encode</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tk_value_encode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_mgr_oob_flags_encode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le_role_encode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[bb]"></a>app_button_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtonMonitoring
</UL>

<P><STRONG><a name="[be]"></a>app_button_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtonMonitoring
</UL>

<P><STRONG><a name="[8e]"></a>app_error_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.app_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentDateTime
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentDateTime
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDFU
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAdvertising
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_manager
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ble_stack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advertising_manager
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtonMonitoring
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_on_ble_event
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCharacteristicsValue
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_battery_service_battery_value
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_device_name
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_get_device_name
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_advertising_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrightnessData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_button_event_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferToSPISlave
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferSPISlaveWithAddress
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAddress4ByteMode
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_put
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_get
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_evt_get
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
</UL>

<P><STRONG><a name="[c5]"></a>app_gap_get_device_name</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_get_device_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_gap_get_device_name &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_device_name
</UL>

<P><STRONG><a name="[c6]"></a>app_gap_on_ble_event</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app_gap.o(i.app_gap_on_ble_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_gap_on_ble_event &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[c7]"></a>app_gap_set_device_name</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, app_gap.o(i.app_gap_set_device_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = app_gap_set_device_name &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWriteDeviceName
</UL>

<P><STRONG><a name="[17d]"></a>app_mailbox_create</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_mailbox.o(i.app_mailbox_create))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
</UL>

<P><STRONG><a name="[cb]"></a>app_mailbox_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_mailbox.o(i.app_mailbox_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = app_mailbox_get &rArr; app_mailbox_sized_get &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_get
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
</UL>

<P><STRONG><a name="[93]"></a>app_mailbox_put</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_mailbox.o(i.app_mailbox_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = app_mailbox_put &rArr; app_mailbox_sized_put &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_put
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>app_mailbox_sized_get</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, app_mailbox.o(i.app_mailbox_sized_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_mailbox_sized_get &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_get
</UL>

<P><STRONG><a name="[cd]"></a>app_mailbox_sized_put</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, app_mailbox.o(i.app_mailbox_sized_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = app_mailbox_sized_put &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_put
</UL>

<P><STRONG><a name="[95]"></a>app_sched_event_put</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, app_scheduler.o(i.app_sched_event_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = app_sched_event_put &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_evt_schedule
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>app_sched_execute</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_scheduler.o(i.app_sched_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_sched_execute &rArr; app_sched_event_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>app_sched_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_scheduler.o(i.app_sched_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sched_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>app_timer_create</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtonMonitoring
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[31]"></a>app_timer_evt_schedule</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_timer_appsh.o(i.app_timer_evt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = app_timer_evt_schedule &rArr; app_sched_event_put &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[d6]"></a>app_timer_init</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>app_timer_start</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_button_event_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[a5]"></a>app_timer_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_button_event_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[bc]"></a>assert_nrf_callback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.assert_nrf_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWriteContext
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBLESensorData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLog
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekLog
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLog
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLog
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_rtc_char
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatFlash
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_put
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadSetting
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadMetaData
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_clear
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawWriteFlash
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawReadFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_assertion_handler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_put
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_get
</UL>

<P><STRONG><a name="[de]"></a>awakeNineAxesSensor</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, twi_slave_nine_axes_sensor.o(i.awakeNineAxesSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = awakeNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToMPU9250
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToAK8963
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
</UL>

<P><STRONG><a name="[e6]"></a>ble_advdata_set</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[e9]"></a>ble_advertising_init</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advertising_manager
</UL>

<P><STRONG><a name="[ec]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[ee]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disposeSystemEvent
</UL>

<P><STRONG><a name="[ed]"></a>ble_advertising_start</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAdvertising
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_advertising_event
</UL>

<P><STRONG><a name="[213]"></a>ble_bas_battery_level_update</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, ble_bas.o(i.ble_bas_battery_level_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_bas_battery_level_update
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_battery_service_battery_value
</UL>

<P><STRONG><a name="[f2]"></a>ble_bas_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
</UL>

<P><STRONG><a name="[f3]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_bas_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_battery_service_ble_event
</UL>

<P><STRONG><a name="[f7]"></a>ble_dis_init</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
</UL>

<P><STRONG><a name="[fb]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
</UL>

<P><STRONG><a name="[e2]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[fc]"></a>bootloader_util_app_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bootloader_util.o(i.bootloader_util_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bootloader_util_app_start
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDFU
</UL>

<P><STRONG><a name="[ab]"></a>characteristic_add</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, ble_srv_common.o(i.characteristic_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = characteristic_add &rArr; set_security_req &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_security_req
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
</UL>

<P><STRONG><a name="[109]"></a>closeLog</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, log_controller.o(i.closeLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = closeLog &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLogging
</UL>

<P><STRONG><a name="[11a]"></a>createLog</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, log_controller.o(i.createLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = createLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHeader
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLogging
</UL>

<P><STRONG><a name="[120]"></a>deserializeSensorServiceLogID</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, senstick_sensor_base_data.o(i.deserializeSensorServiceLogID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deserializeSensorServiceLogID
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUInt32AsLittleEndian
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUInt16AsLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteLogID
</UL>

<P><STRONG><a name="[123]"></a>deserializesensor_service_setting</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, senstick_sensor_base_data.o(i.deserializesensor_service_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = deserializesensor_service_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUInt16AsLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteSetting
</UL>

<P><STRONG><a name="[133]"></a>dm_handle_initialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_handle_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[12d]"></a>dm_init</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_instance_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_manager
</UL>

<P><STRONG><a name="[137]"></a>dm_register</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm_register
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_manager
</UL>

<P><STRONG><a name="[1f4]"></a>enableAwakeByButton</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_button_monitoring.o(i.enableAwakeByButton))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[13b]"></a>erase4kSector</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_slave_mx25_flash_memory.o(i.erase4kSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSPISlave
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommandWriteEnable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32ToByteArray
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatFlash
</UL>

<P><STRONG><a name="[151]"></a>formatFlash</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spi_slave_mx25_flash_memory.o(i.formatFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = formatFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaLogFormatStorage
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLog
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSensorSetting
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSensorSetting
</UL>

<P><STRONG><a name="[152]"></a>formatLog</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, log_controller.o(i.formatLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = formatLog &rArr; formatFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerFormatStorage
</UL>

<P><STRONG><a name="[153]"></a>formatSensorSetting</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, senstick_sensor_controller.o(i.formatSensorSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = formatSensorSetting &rArr; formatFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_observeControlCommand
</UL>

<P><STRONG><a name="[217]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>

<P><STRONG><a name="[154]"></a>getAccelerationData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, twi_slave_nine_axes_sensor.o(i.getAccelerationData))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = getAccelerationData &rArr; readFromMPU9250 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt16AsBigEndian
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromMPU9250
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[e3]"></a>getBatteryLevel</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, battery_service.o(i.getBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = getBatteryLevel &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_convert_single
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_timer_handler
</UL>

<P><STRONG><a name="[15b]"></a>getBrightnessData</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, twi_slave_brightness_sensor.o(i.getBrightnessData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = getBrightnessData &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[15c]"></a>getHumidityData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, twi_slave_humidity_sensor.o(i.getHumidityData))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = getHumidityData &rArr; readFromSHT20 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSHT20
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[15e]"></a>getMagneticFieldData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, twi_slave_nine_axes_sensor.o(i.getMagneticFieldData))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = getMagneticFieldData &rArr; readFromAK8963 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt16AsLittleEndian
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromAK8963
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[161]"></a>getPressureData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, twi_slave_pressure_sensor.o(i.getPressureData))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = getPressureData &rArr; writeToLPS25HB &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readUInt32AsLittleEndian
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToLPS25HB
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromLPS25HB
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[164]"></a>getRotationRateData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, twi_slave_nine_axes_sensor.o(i.getRotationRateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = getRotationRateData &rArr; readFromMPU9250 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt16AsBigEndian
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromMPU9250
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[167]"></a>getTWIRTCDateTime</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, twi_slave_rtc.o(i.getTWIRTCDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = getTWIRTCDateTime &rArr; readFromRTC &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromRTC
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRTCSettingToBLEDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentDateTime
</UL>

<P><STRONG><a name="[166]"></a>getTemperatureData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, twi_slave_humidity_sensor.o(i.getTemperatureData))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = getTemperatureData &rArr; readFromSHT20 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSHT20
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[165]"></a>getUVSensorData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, twi_slave_uv_sensor.o(i.getUVSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = getUVSensorData &rArr; TwiSlave_RX &rArr; nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwiSlave_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSensorDataHandler
</UL>

<P><STRONG><a name="[125]"></a>handle_battery_service_ble_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, battery_service.o(i.handle_battery_service_ble_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = handle_battery_service_ble_event &rArr; ble_bas_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[16a]"></a>initBrightnessSensor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, twi_slave_brightness_sensor.o(i.initBrightnessSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initBrightnessSensor &rArr; writeToBH1780GLI &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToBH1780GLI
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
</UL>

<P><STRONG><a name="[16c]"></a>initButtonMonitoring</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gpio_button_monitoring.o(i.initButtonMonitoring))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = initButtonMonitoring &rArr; app_button_init &rArr; nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>initFlashMemory</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, spi_slave_mx25_flash_memory.o(i.initFlashMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initFlashMemory &rArr; enableAddress4ByteMode &rArr; isAddress4ByteMode &rArr; readConfigrationRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAddress4ByteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>initHumiditySensor</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, twi_slave_humidity_sensor.o(i.initHumiditySensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = initHumiditySensor &rArr; writeToSHT20 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSHT20
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSHT20
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
</UL>

<P><STRONG><a name="[172]"></a>initLEDDriver</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, gpio_led_driver.o(i.initLEDDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = initLEDDriver &rArr; nrf_drv_gpiote_out_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>initMetaDataLogController</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, metadata_log_controller.o(i.initMetaDataLogController))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>initNineAxesSensor</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, twi_slave_nine_axes_sensor.o(i.initNineAxesSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToMPU9250
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToAK8963
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
</UL>

<P><STRONG><a name="[174]"></a>initPressureSensor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, twi_slave_pressure_sensor.o(i.initPressureSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = initPressureSensor &rArr; writeToLPS25HB &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToLPS25HB
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
</UL>

<P><STRONG><a name="[19b]"></a>initRTC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, twi_slave_rtc.o(i.initRTC))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>initSensorService</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sensor_service.o(i.initSensorService))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = initSensorService &rArr; addService &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
</UL>

<P><STRONG><a name="[177]"></a>initSenstickControlService</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, senstick_control_service.o(i.initSenstickControlService))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = initSenstickControlService &rArr; addService &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>initSenstickDataModel</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, senstick_data_model.o(i.initSenstickDataModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initSenstickDataModel
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>initSenstickMetaDataService</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, senstick_meta_data_service.o(i.initSenstickMetaDataService))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = initSenstickMetaDataService &rArr; addService &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addService
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>initSenstickSensorController</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, senstick_sensor_controller.o(i.initSenstickSensorController))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = initSenstickSensorController &rArr; loadSensorSetting &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorService
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_create
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSensorSetting
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>initTWIManager</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, twi_manager.o(i.initTWIManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = initTWIManager &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>initUVSensor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, twi_slave_uv_sensor.o(i.initUVSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = initUVSensor &rArr; TwiSlave_TX &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwiSlave_TX
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorHandler
</UL>

<P><STRONG><a name="[12a]"></a>init_advertising_manager</STRONG> (Thumb, 112 bytes, Stack size 168 bytes, advertising_manager.o(i.init_advertising_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = init_advertising_manager &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[181]"></a>init_app_gap</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, app_gap.o(i.init_app_gap))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = init_app_gap &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>init_battery_service</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, battery_service.o(i.init_battery_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = init_battery_service &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_configure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryLevel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>init_ble_stack</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_stack.o(i.init_ble_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = init_ble_stack &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>init_device_information_service</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, device_information_service.o(i.init_device_information_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = init_device_information_service &rArr; ble_dis_init &rArr; char_add &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>init_device_manager</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, senstick_device_manager.o(i.init_device_manager))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = init_device_manager &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>int16ToByteArrayLittleEndian</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, value_types.o(i.int16ToByteArrayLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
</UL>

<P><STRONG><a name="[8f]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>isMetaLogFormatted</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, metadata_log_controller.o(i.isMetaLogFormatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = isMetaLogFormatted &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>isValidSensorServiceCommand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, senstick_sensor_base_data.o(i.isValidSensorServiceCommand))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteSetting
</UL>

<P><STRONG><a name="[18f]"></a>ledDriver_observeButtonStatus</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio_led_driver.o(i.ledDriver_observeButtonStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ledDriver_observeButtonStatus &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlinking
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setButtonStatus
</UL>

<P><STRONG><a name="[193]"></a>ledDriver_observeControlCommand</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gpio_led_driver.o(i.ledDriver_observeControlCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ledDriver_observeControlCommand &rArr; updateNextBlink &rArr; startBlinking &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[17b]"></a>loadSensorSetting</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, senstick_sensor_controller.o(i.loadSensorSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = loadSensorSetting &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
</UL>

<P><STRONG><a name="[199]"></a>log_rtt_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_log.o(i.log_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = log_rtt_init &rArr; SEGGER_RTT_ConfigUpBuffer &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>log_rtt_printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_log.o(i.log_rtt_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerIsDataFull
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBLEEvent
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_advertising_event
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_advertising_error
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUVSensorData
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteLogID
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = main &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAdvertising
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setDiskFull
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentLogCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerIsDataFull
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerFormatStorage
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaLogFormatStorage
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogGetLogCount
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMetaLogFormatted
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_manager
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_device_information_service
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ble_stack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advertising_manager
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickMetaDataService
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickDataModel
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickControlService
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRTC
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMetaDataLogController
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtonMonitoring
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[216]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>

<P><STRONG><a name="[1a0]"></a>metaDataLogGetLogCount</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, metadata_log_controller.o(i.metaDataLogGetLogCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = metaDataLogGetLogCount &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>metaDataLogReadAbstractText</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, metadata_log_controller.o(i.metaDataLogReadAbstractText))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = metaDataLogReadAbstractText &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogRead
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogCount
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_abstract_char
</UL>

<P><STRONG><a name="[1a5]"></a>metaDataLogReadDateTime</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, metadata_log_controller.o(i.metaDataLogReadDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = metaDataLogReadDateTime &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogRead
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogCount
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_datetime_char
</UL>

<P><STRONG><a name="[1a8]"></a>metaDatalog_observeControlCommand</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, metadata_log_controller.o(i.metaDatalog_observeControlCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = metaDatalog_observeControlCommand &rArr; metaDataLogWrite &rArr; metaDataLogWriteContext &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWrite
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLog
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogAbstractText
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentDateTime
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setDiskFull
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaLogFormatStorage
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[19e]"></a>metaLogFormatStorage</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, metadata_log_controller.o(i.metaLogFormatStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = metaLogFormatStorage &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>notifyToClient</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, service_util.o(i.notifyToClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = notifyToClient
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setValueAndNotify
</UL>

<P><STRONG><a name="[183]"></a>nrf_adc_configure</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_adc.o(i.nrf_adc_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_adc_configure &rArr; nrf_adc_input_select
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_battery_service
</UL>

<P><STRONG><a name="[15a]"></a>nrf_adc_convert_single</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_adc.o(i.nrf_adc_convert_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_adc_convert_single &rArr; nrf_adc_input_select
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryLevel
</UL>

<P><STRONG><a name="[c4]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHumiditySensor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrightnessData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
</UL>

<P><STRONG><a name="[1af]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[bd]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[c1]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[124]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_drv_gpiote_in_is_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[c0]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[bf]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[1b6]"></a>nrf_drv_gpiote_out_clear</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_drv_gpiote_out_clear &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChipEnable
</UL>

<P><STRONG><a name="[16e]"></a>nrf_drv_gpiote_out_init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = nrf_drv_gpiote_out_init &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLEDDriver
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
</UL>

<P><STRONG><a name="[1b8]"></a>nrf_drv_gpiote_out_set</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = nrf_drv_gpiote_out_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChipEnable
</UL>

<P><STRONG><a name="[16f]"></a>nrf_drv_spi_init</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferToSPISlave
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferSPISlaveWithAddress
</UL>

<P><STRONG><a name="[180]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = nrf_drv_twi_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
</UL>

<P><STRONG><a name="[17f]"></a>nrf_drv_twi_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = nrf_drv_twi_init &rArr; nrf_drv_common_irq_enable &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTWIManager
</UL>

<P><STRONG><a name="[97]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwiSlave_RX
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrightnessData
</UL>

<P><STRONG><a name="[99]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwiSlave_TX
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrightnessData
</UL>

<P><STRONG><a name="[1d4]"></a>openLog</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, log_controller.o(i.openLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = openLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHeader
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerIsDataFull
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteLogID
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSampleCount
</UL>

<P><STRONG><a name="[ef]"></a>pstorage_access_status_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[131]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[130]"></a>pstorage_clear</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[19d]"></a>pstorage_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pstorage_init &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>pstorage_load</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[12f]"></a>pstorage_register</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pstorage_register &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_app_gap
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[c9]"></a>pstorage_store</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_device_name
</UL>

<P><STRONG><a name="[12c]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disposeSystemEvent
</UL>

<P><STRONG><a name="[1dc]"></a>reOpenLog</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, log_controller.o(i.reOpenLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reOpenLog
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLogging
</UL>

<P><STRONG><a name="[18e]"></a>readFlash</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, spi_slave_mx25_flash_memory.o(i.readFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWriteContext
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogRead
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isMetaLogFormatted
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLog
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readHeader
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSensorSetting
</UL>

<P><STRONG><a name="[1de]"></a>readFromTwiSlave</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, twi_manager.o(i.readFromTwiSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromMPU9250
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromAK8963
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromRTC
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromLPS25HB
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSHT20
</UL>

<P><STRONG><a name="[156]"></a>readInt16AsBigEndian</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, value_types.o(i.readInt16AsBigEndian))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationRateData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAccelerationData
</UL>

<P><STRONG><a name="[160]"></a>readInt16AsLittleEndian</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, value_types.o(i.readInt16AsLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagneticFieldData
</UL>

<P><STRONG><a name="[142]"></a>readLog</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, log_controller.o(i.readLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBLESensorData
</UL>

<P><STRONG><a name="[1e1]"></a>readSampleCount</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, senstick_sensor_controller.o(i.readSampleCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = readSampleCount &rArr; openLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogCount
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openLog
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadMetaData
</UL>

<P><STRONG><a name="[121]"></a>readUInt16AsLittleEndian</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, value_types.o(i.readUInt16AsLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deserializesensor_service_setting
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deserializeSensorServiceLogID
</UL>

<P><STRONG><a name="[122]"></a>readUInt32AsLittleEndian</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, value_types.o(i.readUInt32AsLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressureData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deserializeSensorServiceLogID
</UL>

<P><STRONG><a name="[1e3]"></a>saveSensorSetting</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, senstick_sensor_controller.o(i.saveSensorSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = saveSensorSetting &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_observeControlCommand
</UL>

<P><STRONG><a name="[1ad]"></a>seekLog</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, log_controller.o(i.seekLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = seekLog &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyLogDataOfDevice
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteLogID
</UL>

<P><STRONG><a name="[1ac]"></a>sensorServiceNotifyLogData</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, sensor_service.o(i.sensorServiceNotifyLogData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sensorServiceNotifyLogData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyLogDataOfDevice
</UL>

<P><STRONG><a name="[1e5]"></a>sensorServiceNotifyRealtimeData</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, sensor_service.o(i.sensorServiceNotifyRealtimeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sensorServiceNotifyRealtimeData
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_notify_raw_data
</UL>

<P><STRONG><a name="[1e4]"></a>sensorService_handleBLEEvent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sensor_service.o(i.sensorService_handleBLEEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = sensorService_handleBLEEvent &rArr; onRWAuthReq &rArr; senstickSensorControllerNotifyLogData &rArr; notifyLogDataOfDevice &rArr; fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_handleBLEEvent
</UL>

<P><STRONG><a name="[126]"></a>senstickControlService_handleBLEEvent</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, senstick_control_service.o(i.senstickControlService_handleBLEEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = senstickControlService_handleBLEEvent &rArr; onWrite &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[1e6]"></a>senstickControlService_observeControlCommand</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, senstick_control_service.o(i.senstickControlService_observeControlCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = senstickControlService_observeControlCommand &rArr; setValueAndNotify &rArr; setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setValueAndNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[1e8]"></a>senstickControlService_observeCurrentLogCount</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, senstick_control_service.o(i.senstickControlService_observeCurrentLogCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = senstickControlService_observeCurrentLogCount &rArr; setValueAndNotify &rArr; setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setValueAndNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentLogCount
</UL>

<P><STRONG><a name="[1e9]"></a>senstickControlService_observeDiskFull</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, senstick_control_service.o(i.senstickControlService_observeDiskFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = senstickControlService_observeDiskFull &rArr; setValueAndNotify &rArr; setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setValueAndNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setDiskFull
</UL>

<P><STRONG><a name="[127]"></a>senstickMetaDataService_handleBLEEvent</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, senstick_meta_data_service.o(i.senstickMetaDataService_handleBLEEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = senstickMetaDataService_handleBLEEvent &rArr; onRWAuthReq &rArr; onRWAuthReq_datetime_char &rArr; metaDataLogReadDateTime &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[19f]"></a>senstickSensorControllerFormatStorage</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, senstick_sensor_controller.o(i.senstickSensorControllerFormatStorage))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = senstickSensorControllerFormatStorage &rArr; setSensorShoudlWork &rArr; flash_mailbox &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorShoudlWork
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatLog
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_observeControlCommand
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>senstickSensorControllerGetNumOfLoggingReadySensor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, senstick_sensor_controller.o(i.senstickSensorControllerGetNumOfLoggingReadySensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = senstickSensorControllerGetNumOfLoggingReadySensor
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[1a2]"></a>senstickSensorControllerIsDataFull</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, senstick_sensor_controller.o(i.senstickSensorControllerIsDataFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = senstickSensorControllerIsDataFull &rArr; openLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openLog
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>senstickSensorControllerNotifyLogData</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, senstick_sensor_controller.o(i.senstickSensorControllerNotifyLogData))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = senstickSensorControllerNotifyLogData &rArr; notifyLogDataOfDevice &rArr; fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyLogDataOfDevice
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_handleBLEEvent
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1cb]"></a>senstickSensorControllerReadMetaData</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, senstick_sensor_controller.o(i.senstickSensorControllerReadMetaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = senstickSensorControllerReadMetaData &rArr; readSampleCount &rArr; openLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeSensorMetaData
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSampleCount
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1ca]"></a>senstickSensorControllerReadSetting</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, senstick_sensor_controller.o(i.senstickSensorControllerReadSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = senstickSensorControllerReadSetting &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializesensor_service_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1cc]"></a>senstickSensorControllerWriteLogID</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, senstick_sensor_controller.o(i.senstickSensorControllerWriteLogID))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = senstickSensorControllerWriteLogID &rArr; openLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogCount
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekLog
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openLog
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deserializeSensorServiceLogID
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1c9]"></a>senstickSensorControllerWriteSetting</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, senstick_sensor_controller.o(i.senstickSensorControllerWriteSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = senstickSensorControllerWriteSetting &rArr; deserializesensor_service_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isValidSensorServiceCommand
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deserializesensor_service_setting
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[128]"></a>senstickSensorController_handleBLEEvent</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, senstick_sensor_controller.o(i.senstickSensorController_handleBLEEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = senstickSensorController_handleBLEEvent &rArr; sensorService_handleBLEEvent &rArr; onRWAuthReq &rArr; senstickSensorControllerNotifyLogData &rArr; notifyLogDataOfDevice &rArr; fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorService_handleBLEEvent
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[1ee]"></a>senstickSensorController_observeControlCommand</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, senstick_sensor_controller.o(i.senstickSensorController_observeControlCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = senstickSensorController_observeControlCommand &rArr; senstickSensorControllerFormatStorage &rArr; setSensorShoudlWork &rArr; flash_mailbox &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerFormatStorage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorShoudlWork
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSensorSetting
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSensorSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[211]"></a>senstick_getButtonStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, senstick_data_model.o(i.senstick_getButtonStatus))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
</UL>

<P><STRONG><a name="[1c4]"></a>senstick_getControlCommand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, senstick_data_model.o(i.senstick_getControlCommand))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
</UL>

<P><STRONG><a name="[1a9]"></a>senstick_getCurrentDateTime</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, senstick_data_model.o(i.senstick_getCurrentDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = senstick_getCurrentDateTime &rArr; getTWIRTCDateTime &rArr; readFromRTC &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTWIRTCDateTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_rtc_char
</UL>

<P><STRONG><a name="[1aa]"></a>senstick_getCurrentLogAbstractText</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, senstick_data_model.o(i.senstick_getCurrentLogAbstractText))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = senstick_getCurrentLogAbstractText &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_abstract_txt
</UL>

<P><STRONG><a name="[1a4]"></a>senstick_getCurrentLogCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, senstick_data_model.o(i.senstick_getCurrentLogCount))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadDateTime
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadAbstractText
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteLogID
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSampleCount
</UL>

<P><STRONG><a name="[212]"></a>senstick_isConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, senstick_data_model.o(i.senstick_isConnected))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
</UL>

<P><STRONG><a name="[1f1]"></a>senstick_isDiskFull</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, senstick_data_model.o(i.senstick_isDiskFull))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[1f0]"></a>senstick_setButtonStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, senstick_data_model.o(i.senstick_setButtonStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = senstick_setButtonStatus &rArr; ledDriver_observeButtonStatus &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeButtonStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setButtonStatus
</UL>

<P><STRONG><a name="[e5]"></a>senstick_setControlCommand</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, senstick_data_model.o(i.senstick_setControlCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + In Cycle
<LI>Call Chain = senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twiPowerDown
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_observeControlCommand
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerGetNumOfLoggingReadySensor
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_observeControlCommand
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeControlCommand
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAwakeByButton
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_isDiskFull
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogCount
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDFU
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setDiskFull
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentLogCount
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeButtonStatus
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setButtonStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_timer_handler
</UL>

<P><STRONG><a name="[1d3]"></a>senstick_setCurrentDateTime</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, senstick_data_model.o(i.senstick_setCurrentDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = senstick_setCurrentDateTime &rArr; setTWIRTCDateTime &rArr; writeToRTC &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTWIRTCDateTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWriteRTC
</UL>

<P><STRONG><a name="[1d0]"></a>senstick_setCurrentLogAbstractText</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, senstick_data_model.o(i.senstick_setCurrentLogAbstractText))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = senstick_setCurrentLogAbstractText &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
</UL>

<P><STRONG><a name="[1a1]"></a>senstick_setCurrentLogCount</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, senstick_data_model.o(i.senstick_setCurrentLogCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = senstick_setCurrentLogCount &rArr; senstickControlService_observeCurrentLogCount &rArr; setValueAndNotify &rArr; setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_observeCurrentLogCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>senstick_setDiskFull</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, senstick_data_model.o(i.senstick_setDiskFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = senstick_setDiskFull &rArr; senstickControlService_observeDiskFull &rArr; setValueAndNotify &rArr; setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_observeDiskFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
</UL>

<P><STRONG><a name="[1d5]"></a>senstick_setIsConnected</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, senstick_data_model.o(i.senstick_setIsConnected))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBLEEvent
</UL>

<P><STRONG><a name="[1eb]"></a>serializeSensorMetaData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, senstick_sensor_base_data.o(i.serializeSensorMetaData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serializeSensorMetaData
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32ToByteArrayLittleEndian
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16ToByteArrayLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadMetaData
</UL>

<P><STRONG><a name="[1ec]"></a>serializesensor_service_setting</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, senstick_sensor_base_data.o(i.serializesensor_service_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serializesensor_service_setting
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16ToByteArrayLittleEndian
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadSetting
</UL>

<P><STRONG><a name="[1f7]"></a>setCharacteristicsValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, service_util.o(i.setCharacteristicsValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setValueAndNotify
</UL>

<P><STRONG><a name="[1f9]"></a>setNineAxesSensorAccelerationRange</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, twi_slave_nine_axes_sensor.o(i.setNineAxesSensorAccelerationRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = setNineAxesSensorAccelerationRange &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToMPU9250
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
</UL>

<P><STRONG><a name="[1fa]"></a>setNineAxesSensorRotationRange</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, twi_slave_nine_axes_sensor.o(i.setNineAxesSensorRotationRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = setNineAxesSensorRotationRange &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToMPU9250
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorWakeupHandler
</UL>

<P><STRONG><a name="[1f6]"></a>setTWIRTCDateTime</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, twi_slave_rtc.o(i.setTWIRTCDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = setTWIRTCDateTime &rArr; writeToRTC &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToRTC
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertBLEDateTimeToRTCSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentDateTime
</UL>

<P><STRONG><a name="[34]"></a>softdevice_assertion_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_assertion_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = softdevice_assertion_handler &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[186]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ble_stack
</UL>

<P><STRONG><a name="[185]"></a>softdevice_handler_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ble_stack
</UL>

<P><STRONG><a name="[187]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ble_stack
</UL>

<P><STRONG><a name="[12b]"></a>startAdvertising</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, advertising_manager.o(i.startAdvertising))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = startAdvertising &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[1f5]"></a>twiPowerDown</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, twi_manager.o(i.twiPowerDown))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[158]"></a>uint16ToByteArrayLittleEndian</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, value_types.o(i.uint16ToByteArrayLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializesensor_service_setting
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeSensorMetaData
</UL>

<P><STRONG><a name="[159]"></a>uint32ToByteArrayLittleEndian</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, value_types.o(i.uint32ToByteArrayLittleEndian))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLEDataHandler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serializeSensorMetaData
</UL>

<P><STRONG><a name="[108]"></a>writeFlash</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, spi_slave_mx25_flash_memory.o(i.writeFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawWriteFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWriteContext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLog
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaLogFormatStorage
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLog
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLog
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveSensorSetting
</UL>

<P><STRONG><a name="[148]"></a>writeLog</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, log_controller.o(i.writeLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = writeLog &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
</UL>

<P><STRONG><a name="[215]"></a>writeToTwiSlave</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, twi_manager.o(i.writeToTwiSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToBH1780GLI
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToMPU9250
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToAK8963
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToRTC
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToLPS25HB
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSHT20
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[32]"></a>diposeBLEEvent</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.diposeBLEEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = diposeBLEEvent &rArr; senstickControlService_handleBLEEvent &rArr; onWrite &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startAdvertising
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_handleBLEEvent
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickMetaDataService_handleBLEEvent
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_handleBLEEvent
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_advertising_manager
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_battery_service_ble_event
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_on_ble_event
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBLEEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[33]"></a>disposeSystemEvent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.disposeSystemEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = disposeSystemEvent &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[129]"></a>printBLEEvent</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.printBLEEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = printBLEEvent &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setIsConnected
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diposeBLEEvent
</UL>

<P><STRONG><a name="[1ef]"></a>current_int_priority_get</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, senstick_data_model.o(i.current_int_priority_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentDateTime
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentDateTime
</UL>

<P><STRONG><a name="[202]"></a>interrupts_disable</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, senstick_data_model.o(i.interrupts_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = interrupts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startDFU
</UL>

<P><STRONG><a name="[1f3]"></a>startDFU</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, senstick_data_model.o(i.startDFU))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = startDFU &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
</UL>

<P><STRONG><a name="[80]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigUpBuffer
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_ConfigDownBuffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[84]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[86]"></a>_WriteBlocking</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[85]"></a>_WriteNoCheck</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[89]"></a>_PrintInt</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[8a]"></a>_PrintUnsigned</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[88]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[105]"></a>closeLog</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, metadata_log_controller.o(i.closeLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = closeLog &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetAddress
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
</UL>

<P><STRONG><a name="[107]"></a>getTargetAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, metadata_log_controller.o(i.getTargetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWriteContext
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogRead
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLog
</UL>

<P><STRONG><a name="[106]"></a>metaDataLogRead</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, metadata_log_controller.o(i.metaDataLogRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetAddress
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLog
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogGetLogCount
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadDateTime
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadAbstractText
</UL>

<P><STRONG><a name="[1a6]"></a>metaDataLogWrite</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, metadata_log_controller.o(i.metaDataLogWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = metaDataLogWrite &rArr; metaDataLogWriteContext &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWriteContext
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDatalog_observeControlCommand
</UL>

<P><STRONG><a name="[1a7]"></a>metaDataLogWriteContext</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, metadata_log_controller.o(i.metaDataLogWriteContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = metaDataLogWriteContext &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTargetAddress
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogWrite
</UL>

<P><STRONG><a name="[2c]"></a>on_advertising_error</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, advertising_manager.o(i.on_advertising_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = on_advertising_error &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> advertising_manager.o(i.init_advertising_manager)
</UL>
<P><STRONG><a name="[2d]"></a>on_advertising_event</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, advertising_manager.o(i.on_advertising_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = on_advertising_event &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_rtt_printf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> advertising_manager.o(i.init_advertising_manager)
</UL>
<P><STRONG><a name="[2e]"></a>app_gap_pstorage_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gap.o(i.app_gap_pstorage_callback))
<BR>[Address Reference Count : 1]<UL><LI> app_gap.o(i.init_app_gap)
</UL>
<P><STRONG><a name="[30]"></a>device_manager_evt_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, senstick_device_manager.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = device_manager_evt_handler &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> senstick_device_manager.o(i.init_device_manager)
</UL>
<P><STRONG><a name="[2f]"></a>battery_timer_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, battery_service.o(i.battery_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = battery_timer_handler &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryLevel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_battery_service_battery_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery_service.o(i.init_battery_service)
</UL>
<P><STRONG><a name="[e4]"></a>update_battery_service_battery_value</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, battery_service.o(i.update_battery_service_battery_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = update_battery_service_battery_value &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_battery_level_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_timer_handler
</UL>

<P><STRONG><a name="[a9]"></a>addService</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, senstick_meta_data_service.o(i.addService))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = addService &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickMetaDataService
</UL>

<P><STRONG><a name="[1c0]"></a>onRWAuthReq</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, senstick_meta_data_service.o(i.onRWAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = onRWAuthReq &rArr; onRWAuthReq_datetime_char &rArr; metaDataLogReadDateTime &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_datetime_char
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_abstract_char
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickMetaDataService_handleBLEEvent
</UL>

<P><STRONG><a name="[1c2]"></a>onRWAuthReq_abstract_char</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, senstick_meta_data_service.o(i.onRWAuthReq_abstract_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = onRWAuthReq_abstract_char &rArr; metaDataLogReadAbstractText &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadAbstractText
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1c1]"></a>onRWAuthReq_datetime_char</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, senstick_meta_data_service.o(i.onRWAuthReq_datetime_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = onRWAuthReq_datetime_char &rArr; metaDataLogReadDateTime &rArr; metaDataLogRead &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;metaDataLogReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1cd]"></a>onWrite</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, senstick_meta_data_service.o(i.onWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = onWrite &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickMetaDataService_handleBLEEvent
</UL>

<P><STRONG><a name="[ac]"></a>addService</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, senstick_control_service.o(i.addService))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = addService &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickControlService
</UL>

<P><STRONG><a name="[1ff]"></a>is_notification_enabled</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, senstick_control_service.o(i.is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setValueAndNotify
</UL>

<P><STRONG><a name="[1c3]"></a>onRWAuthReq</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, senstick_control_service.o(i.onRWAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = onRWAuthReq &rArr; onRWAuthReq_rtc_char &rArr; senstick_getCurrentDateTime &rArr; getTWIRTCDateTime &rArr; readFromRTC &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getControlCommand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_rtc_char
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_device_name
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq_abstract_txt
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_handleBLEEvent
</UL>

<P><STRONG><a name="[1c6]"></a>onRWAuthReq_abstract_txt</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, senstick_control_service.o(i.onRWAuthReq_abstract_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = onRWAuthReq_abstract_txt &rArr; senstick_getCurrentLogAbstractText &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentLogAbstractText
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1c7]"></a>onRWAuthReq_device_name</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, senstick_control_service.o(i.onRWAuthReq_device_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = onRWAuthReq_device_name &rArr; app_gap_get_device_name &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_get_device_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1c5]"></a>onRWAuthReq_rtc_char</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, senstick_control_service.o(i.onRWAuthReq_rtc_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = onRWAuthReq_rtc_char &rArr; senstick_getCurrentDateTime &rArr; getTWIRTCDateTime &rArr; readFromRTC &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getCurrentDateTime
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onRWAuthReq
</UL>

<P><STRONG><a name="[1ce]"></a>onWrite</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, senstick_control_service.o(i.onWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = onWrite &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentLogAbstractText
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWriteRTC
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWriteDeviceName
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_handleBLEEvent
</UL>

<P><STRONG><a name="[1d1]"></a>onWriteDeviceName</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, senstick_control_service.o(i.onWriteDeviceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = onWriteDeviceName &rArr; app_gap_set_device_name &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_gap_set_device_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
</UL>

<P><STRONG><a name="[1cf]"></a>onWriteRTC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, senstick_control_service.o(i.onWriteRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = onWriteRTC &rArr; senstick_setCurrentDateTime &rArr; setTWIRTCDateTime &rArr; writeToRTC &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setCurrentDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;onWrite
</UL>

<P><STRONG><a name="[1e7]"></a>setValueAndNotify</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, senstick_control_service.o(i.setValueAndNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = setValueAndNotify &rArr; setCharacteristicsValue &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCharacteristicsValue
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyToClient
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_observeDiskFull
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_observeCurrentLogCount
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickControlService_observeControlCommand
</UL>

<P><STRONG><a name="[11b]"></a>readHeader</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, log_controller.o(i.readHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openLog
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLog
</UL>

<P><STRONG><a name="[94]"></a>current_int_priority_get</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, senstick_sensor_controller.o(i.current_int_priority_get))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>fillBLESensorData</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, senstick_sensor_controller.o(i.fillBLESensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notifyLogDataOfDevice
</UL>

<P><STRONG><a name="[146]"></a>flash_mailbox</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, senstick_sensor_controller.o(i.flash_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = flash_mailbox &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setDiskFull
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setControlCommand
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_notify_raw_data
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;current_int_priority_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLog
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_get
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorShoudlWork
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_event_handler
</UL>

<P><STRONG><a name="[17c]"></a>init_timer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, senstick_sensor_controller.o(i.init_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = init_timer &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSenstickSensorController
</UL>

<P><STRONG><a name="[1ab]"></a>notifyLogDataOfDevice</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, senstick_sensor_controller.o(i.notifyLogDataOfDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = notifyLogDataOfDevice &rArr; fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBLESensorData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekLog
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorServiceNotifyLogData
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
</UL>

<P><STRONG><a name="[23]"></a>sched_event_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, senstick_sensor_controller.o(i.sched_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = sched_event_handler &rArr; flash_mailbox &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> senstick_sensor_controller.o(i.TIMER2_IRQHandler)
</UL>
<P><STRONG><a name="[147]"></a>sensor_notify_raw_data</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, senstick_sensor_controller.o(i.sensor_notify_raw_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sensor_notify_raw_data &rArr; sensorServiceNotifyRealtimeData
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorServiceNotifyRealtimeData
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
</UL>

<P><STRONG><a name="[1fb]"></a>setSensorPower</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, senstick_sensor_controller.o(i.setSensorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setSensorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorShoudlWork
</UL>

<P><STRONG><a name="[1ea]"></a>setSensorShoudlWork</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, senstick_sensor_controller.o(i.setSensorShoudlWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = setSensorShoudlWork &rArr; flash_mailbox &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopLogging
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startLogging
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorPower
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_mailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorController_observeControlCommand
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerFormatStorage
</UL>

<P><STRONG><a name="[1fc]"></a>startLogging</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, senstick_sensor_controller.o(i.startLogging))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = startLogging &rArr; createLog &rArr; readHeader &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorShoudlWork
</UL>

<P><STRONG><a name="[1fd]"></a>stopLogging</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, senstick_sensor_controller.o(i.stopLogging))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = stopLogging &rArr; closeLog &rArr; writeFlash &rArr; erase4kSector &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reOpenLog
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSensorShoudlWork
</UL>

<P><STRONG><a name="[ad]"></a>addService</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, sensor_service.o(i.addService))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = addService &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSensorService
</UL>

<P><STRONG><a name="[1c8]"></a>onRWAuthReq</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, sensor_service.o(i.onRWAuthReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = onRWAuthReq &rArr; senstickSensorControllerNotifyLogData &rArr; notifyLogDataOfDevice &rArr; fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteSetting
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerWriteLogID
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadSetting
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerReadMetaData
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorService_handleBLEEvent
</UL>

<P><STRONG><a name="[1d2]"></a>onWrite</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sensor_service.o(i.onWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = onWrite &rArr; senstickSensorControllerNotifyLogData &rArr; notifyLogDataOfDevice &rArr; fillBLESensorData &rArr; readLog &rArr; readFlash &rArr; rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstickSensorControllerNotifyLogData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorService_handleBLEEvent
</UL>

<P><STRONG><a name="[39]"></a>getBLEDataHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, acceleration_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16ToByteArrayLittleEndian
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acceleration_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, acceleration_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> acceleration_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>getSensorDataHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, acceleration_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = getSensorDataHandler &rArr; getAccelerationData &rArr; readFromMPU9250 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAccelerationData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acceleration_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, acceleration_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = initSensorHandler &rArr; initNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNineAxesSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acceleration_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>setSensorWakeupHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, acceleration_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = setSensorWakeupHandler &rArr; awakeNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNineAxesSensorAccelerationRange
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAccelerationData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awakeNineAxesSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> acceleration_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>getBLEDataHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gyro_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16ToByteArrayLittleEndian
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gyro_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> gyro_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>getSensorDataHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gyro_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = getSensorDataHandler &rArr; getRotationRateData &rArr; readFromMPU9250 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationRateData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gyro_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = initSensorHandler &rArr; initNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNineAxesSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>setSensorWakeupHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gyro_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = setSensorWakeupHandler &rArr; awakeNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNineAxesSensorRotationRange
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationRateData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awakeNineAxesSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gyro_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>getBLEDataHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, magnetic_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16ToByteArrayLittleEndian
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> magnetic_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, magnetic_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> magnetic_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>getSensorDataHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, magnetic_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = getSensorDataHandler &rArr; getMagneticFieldData &rArr; readFromAK8963 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagneticFieldData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> magnetic_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, magnetic_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = initSensorHandler &rArr; initNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNineAxesSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> magnetic_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>setSensorWakeupHandler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, magnetic_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = setSensorWakeupHandler &rArr; awakeNineAxesSensor &rArr; writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagneticFieldData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awakeNineAxesSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> magnetic_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>getBLEDataHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, brightness_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16ToByteArrayLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> brightness_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, brightness_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> brightness_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>getSensorDataHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, brightness_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = getSensorDataHandler &rArr; getBrightnessData &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrightnessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> brightness_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, brightness_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = initSensorHandler &rArr; initBrightnessSensor &rArr; writeToBH1780GLI &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBrightnessSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> brightness_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>setSensorWakeupHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, brightness_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = setSensorWakeupHandler &rArr; getBrightnessData &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBrightnessData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> brightness_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>getBLEDataHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uv_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16ToByteArrayLittleEndian
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uv_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uv_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> uv_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>getSensorDataHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uv_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = getSensorDataHandler &rArr; getUVSensorData &rArr; TwiSlave_RX &rArr; nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUVSensorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uv_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uv_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = initSensorHandler &rArr; initUVSensor &rArr; TwiSlave_TX &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUVSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uv_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>setSensorWakeupHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uv_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = setSensorWakeupHandler &rArr; getUVSensorData &rArr; TwiSlave_RX &rArr; nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUVSensorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uv_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>getBLEDataHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, humidity_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16ToByteArrayLittleEndian
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> humidity_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, humidity_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> humidity_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>getSensorDataHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, humidity_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = getSensorDataHandler &rArr; getTemperatureData &rArr; readFromSHT20 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHumidityData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> humidity_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, humidity_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initSensorHandler &rArr; initHumiditySensor &rArr; writeToSHT20 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHumiditySensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> humidity_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>setSensorWakeupHandler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, humidity_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = setSensorWakeupHandler &rArr; getTemperatureData &rArr; readFromSHT20 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHumidityData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> humidity_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>getBLEDataHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, pressure_sensor_base.o(i.getBLEDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getBLEDataHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32ToByteArrayLittleEndian
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pressure_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>getMaxMinValueHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pressure_sensor_base.o(i.getMaxMinValueHandler))
<BR>[Address Reference Count : 1]<UL><LI> pressure_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>getSensorDataHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pressure_sensor_base.o(i.getSensorDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = getSensorDataHandler &rArr; getPressureData &rArr; writeToLPS25HB &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressureData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pressure_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>initSensorHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pressure_sensor_base.o(i.initSensorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initSensorHandler &rArr; initPressureSensor &rArr; writeToLPS25HB &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPressureSensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pressure_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>setSensorWakeupHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pressure_sensor_base.o(i.setSensorWakeupHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = setSensorWakeupHandler &rArr; getPressureData &rArr; writeToLPS25HB &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressureData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pressure_sensor_base.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>convertBLEDateTimeToRTCSetting</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, twi_slave_rtc.o(i.convertBLEDateTimeToRTCSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = convertBLEDateTimeToRTCSetting &rArr; convertToBCD &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertToBCD
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTWIRTCDateTime
</UL>

<P><STRONG><a name="[119]"></a>convertFromBCD</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, twi_slave_rtc.o(i.convertFromBCD))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertRTCSettingToBLEDateTime
</UL>

<P><STRONG><a name="[118]"></a>convertRTCSettingToBLEDateTime</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, twi_slave_rtc.o(i.convertRTCSettingToBLEDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convertRTCSettingToBLEDateTime
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertFromBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTWIRTCDateTime
</UL>

<P><STRONG><a name="[117]"></a>convertToBCD</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_rtc.o(i.convertToBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = convertToBCD &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertBLEDateTimeToRTCSetting
</UL>

<P><STRONG><a name="[168]"></a>readFromRTC</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, twi_slave_rtc.o(i.readFromRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = readFromRTC &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTWIRTCDateTime
</UL>

<P><STRONG><a name="[1fe]"></a>writeToRTC</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, twi_slave_rtc.o(i.writeToRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = writeToRTC &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_twi_slave_rtc_c_initRTC__nrf_delay_us
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTWIRTCDateTime
</UL>

<P><STRONG><a name="[15f]"></a>readFromAK8963</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_nine_axes_sensor.o(i.readFromAK8963))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = readFromAK8963 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagneticFieldData
</UL>

<P><STRONG><a name="[155]"></a>readFromMPU9250</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_nine_axes_sensor.o(i.readFromMPU9250))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = readFromMPU9250 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRotationRateData
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAccelerationData
</UL>

<P><STRONG><a name="[e0]"></a>writeToAK8963</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_nine_axes_sensor.o(i.writeToAK8963))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = writeToAK8963 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNineAxesSensor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awakeNineAxesSensor
</UL>

<P><STRONG><a name="[df]"></a>writeToMPU9250</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_nine_axes_sensor.o(i.writeToMPU9250))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = writeToMPU9250 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNineAxesSensorRotationRange
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNineAxesSensorAccelerationRange
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initNineAxesSensor
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;awakeNineAxesSensor
</UL>

<P><STRONG><a name="[16b]"></a>writeToBH1780GLI</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, twi_slave_brightness_sensor.o(i.writeToBH1780GLI))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = writeToBH1780GLI &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBrightnessSensor
</UL>

<P><STRONG><a name="[15d]"></a>readFromSHT20</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_humidity_sensor.o(i.readFromSHT20))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = readFromSHT20 &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHumiditySensor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperatureData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHumidityData
</UL>

<P><STRONG><a name="[171]"></a>writeToSHT20</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_humidity_sensor.o(i.writeToSHT20))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = writeToSHT20 &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHumiditySensor
</UL>

<P><STRONG><a name="[162]"></a>readFromLPS25HB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_pressure_sensor.o(i.readFromLPS25HB))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = readFromLPS25HB &rArr; readFromTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressureData
</UL>

<P><STRONG><a name="[163]"></a>writeToLPS25HB</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, twi_slave_pressure_sensor.o(i.writeToLPS25HB))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = writeToLPS25HB &rArr; writeToTwiSlave &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTwiSlave
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPressureSensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPressureData
</UL>

<P><STRONG><a name="[7c]"></a>IsFlashBusy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.IsFlashBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawWriteFlash
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawReadFlash
</UL>

<P><STRONG><a name="[138]"></a>enableAddress4ByteMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.enableAddress4ByteMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = enableAddress4ByteMode &rArr; isAddress4ByteMode &rArr; readConfigrationRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSPISlave
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAddress4ByteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFlashMemory
</UL>

<P><STRONG><a name="[13a]"></a>isAddress4ByteMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.isAddress4ByteMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = isAddress4ByteMode &rArr; readConfigrationRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readConfigrationRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAddress4ByteMode
</UL>

<P><STRONG><a name="[1d8]"></a>rawReadFlash</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_slave_mx25_flash_memory.o(i.rawReadFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = rawReadFlash &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSPISlaveWithAddress
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
</UL>

<P><STRONG><a name="[1da]"></a>rawWriteFlash</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spi_slave_mx25_flash_memory.o(i.rawWriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = rawWriteFlash &rArr; waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSPISlaveWithAddress
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommandWriteEnable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlashReady
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
</UL>

<P><STRONG><a name="[18c]"></a>readConfigrationRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.readConfigrationRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = readConfigrationRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSPISlave
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isAddress4ByteMode
</UL>

<P><STRONG><a name="[1dd]"></a>readFromSPISlave</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.readFromSPISlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferToSPISlave
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readStatusRegister
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readConfigrationRegister
</UL>

<P><STRONG><a name="[1d9]"></a>readFromSPISlaveWithAddress</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spi_slave_mx25_flash_memory.o(i.readFromSPISlaveWithAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = readFromSPISlaveWithAddress &rArr; transferSPISlaveWithAddress &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferSPISlaveWithAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawReadFlash
</UL>

<P><STRONG><a name="[7d]"></a>readStatusRegister</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.readStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSPISlave
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>

<P><STRONG><a name="[1f8]"></a>setChipEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.setChipEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = setChipEnable &rArr; nrf_drv_gpiote_out_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferToSPISlave
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferSPISlaveWithAddress
</UL>

<P><STRONG><a name="[1e0]"></a>transferSPISlaveWithAddress</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, spi_slave_mx25_flash_memory.o(i.transferSPISlaveWithAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = transferSPISlaveWithAddress &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32ToByteArray
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChipEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSPISlaveWithAddress
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSPISlaveWithAddress
</UL>

<P><STRONG><a name="[1df]"></a>transferToSPISlave</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, spi_slave_mx25_flash_memory.o(i.transferToSPISlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChipEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSPISlave
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromSPISlave
</UL>

<P><STRONG><a name="[13d]"></a>uint32ToByteArray</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_slave_mx25_flash_memory.o(i.uint32ToByteArray))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferSPISlaveWithAddress
</UL>

<P><STRONG><a name="[13e]"></a>waitFlashReady</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.waitFlashReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = waitFlashReady &rArr; IsFlashBusy &rArr; readStatusRegister &rArr; readFromSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFlashBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlash
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlash
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawWriteFlash
</UL>

<P><STRONG><a name="[13c]"></a>writeCommandWriteEnable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.writeCommandWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = writeCommandWriteEnable &rArr; writeToSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToSPISlave
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawWriteFlash
</UL>

<P><STRONG><a name="[139]"></a>writeToSPISlave</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_slave_mx25_flash_memory.o(i.writeToSPISlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = writeToSPISlave &rArr; transferToSPISlave &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferToSPISlave
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase4kSector
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommandWriteEnable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableAddress4ByteMode
</UL>

<P><STRONG><a name="[1db]"></a>writeToSPISlaveWithAddress</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, spi_slave_mx25_flash_memory.o(i.writeToSPISlaveWithAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = writeToSPISlaveWithAddress &rArr; transferSPISlaveWithAddress &rArr; nrf_drv_spi_transfer &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transferSPISlaveWithAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawWriteFlash
</UL>

<P><STRONG><a name="[2b]"></a>led_timer_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio_led_driver.o(i.led_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = led_timer_handler &rArr; setLED &rArr; nrf_drv_gpiote_out_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_led_driver.o(i.initLEDDriver)
</UL>
<P><STRONG><a name="[194]"></a>setLED</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio_led_driver.o(i.setLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = setLED &rArr; nrf_drv_gpiote_out_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timer_handler
</UL>

<P><STRONG><a name="[192]"></a>startBlinking</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio_led_driver.o(i.startBlinking))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = startBlinking &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeButtonStatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateNextBlink
</UL>

<P><STRONG><a name="[190]"></a>updateNextBlink</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio_led_driver.o(i.updateNextBlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = updateNextBlink &rArr; startBlinking &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_isConnected
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getControlCommand
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_getButtonStatus
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startBlinking
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeControlCommand
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledDriver_observeButtonStatus
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timer_handler
</UL>

<P><STRONG><a name="[29]"></a>_button_event_handler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpio_button_monitoring.o(i._button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = _button_event_handler &rArr; buttonIsReleased &rArr; setButtonStatus &rArr; senstick_setButtonStatus &rArr; ledDriver_observeButtonStatus &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setButtonStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonIsReleased
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_button_monitoring.o(i.initButtonMonitoring)
</UL>
<P><STRONG><a name="[a6]"></a>buttonIsReleased</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_button_monitoring.o(i.buttonIsReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = buttonIsReleased &rArr; setButtonStatus &rArr; senstick_setButtonStatus &rArr; ledDriver_observeButtonStatus &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setButtonStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_button_event_handler
</UL>

<P><STRONG><a name="[a3]"></a>setButtonStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio_button_monitoring.o(i.setButtonStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = setButtonStatus &rArr; senstick_setButtonStatus &rArr; ledDriver_observeButtonStatus &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;senstick_setButtonStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonIsReleased
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_button_event_handler
</UL>

<P><STRONG><a name="[2a]"></a>timer_handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio_button_monitoring.o(i.timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = timer_handler &rArr; setButtonStatus &rArr; senstick_setButtonStatus &rArr; ledDriver_observeButtonStatus &rArr; senstick_setControlCommand &rArr;  senstick_setControlCommand (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setButtonStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_button_monitoring.o(i.initButtonMonitoring)
</UL>
<P><STRONG><a name="[91]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[90]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e7]"></a>advdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[b3]"></a>appearance_encode</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b2]"></a>ble_device_addr_encode</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[114]"></a>conn_int_check</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[b7]"></a>conn_int_encode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b4]"></a>flags_encode</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b1]"></a>le_role_encode</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, ble_advdata.o(i.le_role_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = le_role_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b8]"></a>manuf_specific_data_encode</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ba]"></a>name_encode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[af]"></a>sec_mgr_oob_flags_encode</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ble_advdata.o(i.sec_mgr_oob_flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sec_mgr_oob_flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b9]"></a>service_data_encode</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[e8]"></a>srdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[b0]"></a>tk_value_encode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ble_advdata.o(i.tk_value_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tk_value_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b5]"></a>tx_power_level_encode</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[dd]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[b6]"></a>uuid_list_encode</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[214]"></a>uuid_list_sized_encode</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[eb]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_peer_address_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[f0]"></a>peer_address_exists</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[f1]"></a>whitelist_has_entries</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[e1]"></a>battery_level_char_add</STRONG> (Thumb, 308 bytes, Stack size 88 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = battery_level_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[f5]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_bas.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[f6]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_bas.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[f4]"></a>on_write</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_bas.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[f8]"></a>char_add</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = char_add &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[fa]"></a>pnp_id_encode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pnp_id_encode &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[f9]"></a>sys_id_encode</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sys_id_encode &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[fe]"></a>set_security_req</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, ble_srv_common.o(i.set_security_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_security_req &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characteristic_add
</UL>

<P><STRONG><a name="[135]"></a>app_evt_notify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.app_evt_notify))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[115]"></a>connection_instance_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.connection_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = connection_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[28]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 396 bytes, Stack size 104 bytes, device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dm_pstorage_cb_handler &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_initialize
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_evt_notify
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[12e]"></a>peer_instance_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_status_bit_reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[136]"></a>update_status_bit_reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.update_status_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
</UL>

<P><STRONG><a name="[d1]"></a>app_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[d0]"></a>app_notify_error_state_transit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.app_notify_error_state_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>

<P><STRONG><a name="[ff]"></a>clear_operation_execute</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[102]"></a>clear_post_processing_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[10a]"></a>cmd_process</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>

<P><STRONG><a name="[10c]"></a>cmd_queue_dequeue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
</UL>

<P><STRONG><a name="[10f]"></a>cmd_queue_element_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>

<P><STRONG><a name="[10d]"></a>cmd_queue_enqueue</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[10e]"></a>cmd_queue_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
</UL>

<P><STRONG><a name="[103]"></a>command_end_procedure_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[110]"></a>command_queue_element_consume</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.command_queue_element_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = command_queue_element_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[5f]"></a>data_page_erase_state_run</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = data_page_erase_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data_to_swap_write_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>erase_sub_state_sm_run</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pstorage.o(i.erase_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[145]"></a>flash_api_err_code_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[14b]"></a>flash_operation_failure_run</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_failure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_operation_failure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[14c]"></a>flash_operation_success_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_sm_run
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[14f]"></a>flash_page_erase</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>

<P><STRONG><a name="[150]"></a>flash_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[61]"></a>head_restore_state_run</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = head_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>is_page_erase_required</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_page_erase_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[169]"></a>is_tail_data_page_swap_required</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pstorage.o(i.is_tail_data_page_swap_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_tail_data_page_swap_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
</UL>

<P><STRONG><a name="[1d6]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[140]"></a>main_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[1d7]"></a>pstorage_flash_page_end</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_flash_page_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[100]"></a>pstorage_flash_page_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_flash_page_size))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[d2]"></a>sm_state_change</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[203]"></a>state_data_erase_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_data_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_data_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[204]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = state_data_erase_swap_entry_run &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[201]"></a>state_entry_action_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pstorage.o(i.state_entry_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[5a]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>state_idle_entry_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.state_idle_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_idle_entry_run &rArr; cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[5c]"></a>state_restore_head_entry_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>state_store_entry_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.state_store_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[58]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
</UL>

<P><STRONG><a name="[104]"></a>store_operation_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.store_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[14d]"></a>store_sub_state_sm_run</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pstorage.o(i.store_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = store_sub_state_sm_run &rArr; main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[5d]"></a>swap_erase_state_run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = swap_erase_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>swap_sub_sm_exit_action_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_sm_exit_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[208]"></a>swap_sub_state_entry_action_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_entry_action_run))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>

<P><STRONG><a name="[11f]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[14e]"></a>swap_sub_state_sm_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_sm_run))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[11c]"></a>swap_sub_state_state_change</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[60]"></a>tail_restore_state_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tail_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>tail_word_size_calculate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pstorage.o(i.tail_word_size_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tail_word_size_calculate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[10b]"></a>update_operation_execute</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.update_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[1b5]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[1b3]"></a>channel_port_alloc</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[7a]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>nrf_gpio_cfg</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[7b]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>pin_in_use</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_clear
</UL>

<P><STRONG><a name="[1b0]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[1b1]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[1b2]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_clear
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[1ae]"></a>nrf_adc_input_select</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_adc.o(i.nrf_adc_input_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_adc_input_select
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_convert_single
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_configure
</UL>

<P><STRONG><a name="[143]"></a>finish_transfer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[8b]"></a>irq_handler_spi</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = irq_handler_spi &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>nrf_gpio_cfg</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[1b9]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[144]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>

<P><STRONG><a name="[18b]"></a>transfer_byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = transfer_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spi
</UL>

<P><STRONG><a name="[69]"></a>ack_error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.ack_error))
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>address_req</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.address_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = address_req &rArr; tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>nrf_drv_twi_int_handler</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.nrf_drv_twi_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = nrf_drv_twi_int_handler &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TWI1_IRQHandler
</UL>

<P><STRONG><a name="[210]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[1bd]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_action_wait
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>

<P><STRONG><a name="[66]"></a>on_error</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.on_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_error
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>rx_address_req</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_address_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rx_address_req &rArr; rx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_prepare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>rx_done</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rx_done &rArr; rx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_prepare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>rx_prepare</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_address_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>state_machine</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>

<P><STRONG><a name="[20f]"></a>twi_action_wait</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_action_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_action_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[1bc]"></a>twi_clear_bus</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[1bf]"></a>twi_transfer</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = twi_transfer &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_action_wait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[64]"></a>tx_done</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tx_done &rArr; tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>tx_prepare</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.tx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>txrx_shorts_set_task_start</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.txrx_shorts_set_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = txrx_shorts_set_task_start &rArr; state_machine &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_prepare
</UL>

<P><STRONG><a name="[9b]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>rx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>tx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[26]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = detection_delay_timeout_handler &rArr; nrf_drv_gpiote_in_is_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[25]"></a>gpiote_event_handler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gpiote_event_handler &rArr; nrf_drv_gpiote_in_is_set &rArr; assert_nrf_callback &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[d3]"></a>app_sched_event_get</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_scheduler.o(i.app_sched_event_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_sched_event_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_index
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_execute
</UL>

<P><STRONG><a name="[d4]"></a>next_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_scheduler.o(i.next_index))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_put
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sched_event_get
</UL>

<P><STRONG><a name="[d8]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[111]"></a>compare_reg_update</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[20a]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[20b]"></a>expired_timers_handler</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[195]"></a>list_deletions_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[197]"></a>list_insertions_handler</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[d9]"></a>rtc1_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[112]"></a>rtc1_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[d7]"></a>rtc1_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[209]"></a>timeout_handler_exec</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[8d]"></a>timer_list_handler</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[20e]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[198]"></a>timer_list_insert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[196]"></a>timer_list_remove</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[db]"></a>timer_start_op_schedule</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_start_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[dc]"></a>timer_stop_op_schedule</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_stop_op_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[7e]"></a>timer_timeouts_check</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[da]"></a>user_id_get</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[20c]"></a>user_op_alloc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[20d]"></a>user_op_enque</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[27]"></a>app_timer_evt_get</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_timer_appsh.o(i.app_timer_evt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = app_timer_evt_get &rArr; app_error_handler &rArr; log_rtt_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_timer_appsh.o(i.app_timer_evt_schedule)
</UL>
<P><STRONG><a name="[ce]"></a>current_int_priority_get</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_mailbox.o(i.current_int_priority_get))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_put
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_get
</UL>

<P><STRONG><a name="[cf]"></a>dequeue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_mailbox.o(i.dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_put
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mailbox_sized_get
</UL>

<P><STRONG><a name="[a2]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>

<P><STRONG><a name="[a8]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
