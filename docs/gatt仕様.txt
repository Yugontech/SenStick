
名前		サンプリング周期	サービスUUID		
加速度		10ミリ秒以上、100ミリ秒周期か、100ミリ秒以下(10, 20, 50, 100ミリ秒の倍数)
ジャイロ		10ミリ秒以上
磁界		10ミリ秒以上
気圧		100ミリ秒以上

照度、独自でOK	200ミリ秒以上、変換に150ミリ秒かかるから。100ミリ秒周期
UV、独自でOK	内部で自動サンプリング、275ミリ秒ごと。なので300ミリ秒以上。100ミリ秒周期
温度湿度		12ミリ秒、9ミリ秒かかる。サンプル周期が10ミリ秒だときつい。->2段階に分けてサンプリングするか、バスを握られないにするか。
		周期、100ミリ秒以上、100ミリ秒周期


ロギングの仕様
センサータグは、常にデータを取り続ける。
サンプリング周期の設定を変更すれば、異なるログとなる。
ログはID番号で指定する。

ログは、データユニット(0-99)の単位で管理される。
データユニットは、ヘッダ情報と、設定に従ってサンプルされたセンサーデータの配列で構成される。
ヘッダ情報には、センサーのサンプリング周期、日時、概要テキストが記録される。
センサデータの配列は、I2Cで読み取った構造体そのもの。


TWIについての覚書
nrf_drvはハードウェアのラッパー。
コールバック関数を定義すると、ノンブロッキングモード。関数をNULLにしておくと、ブロッキングモード。
ノンブロッキングモードでバスの処理終了を待たずに関数を呼び出すと、BUSYでエラーが返ってくる。
app_twiはnrf_drv_twiのコールバックを構造化して個別に分配するもの+キューで処理を直列化する。ただキューに保持するデータが外部で確保されていることが必須。
バスの占有時間で処理ができることがメリットになるならば、採用する価値があるが。
10ミリ秒ごとに、400kHzで24バイトx3として1.4ミリ秒。今回はセンサーが3mAほど消費するから、プロセッサの消費電力低減に意味はなさそう。
ブロッキングで、メリットも、問題も、ないか。

ログのリーディング、書き込み中のを読み込んでいるときは、それを中断しとかないと、やばい?

